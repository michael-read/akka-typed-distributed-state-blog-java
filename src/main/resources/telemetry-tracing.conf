cinnamon.opentracing {
  debug = on

#  jaeger {
#    debug = on
#    host = ${JAEGER-HOST}
#  }

  tracer {
    debug = on
    service-name = "artifactState"

    # Trace sampler to use
    sampler = rate-limiting-sampler

    rate-limiting-sampler {
      # Maximum number of sampled traces per second
      max-traces-per-second = 5
    }

    # Log trace spans with SLF4J (can be used for debugging the tracer)
    # Set `cinnamon.opentracing.tracer.reporters += trace-logging`
    trace-logging {
      # Name of SLF4J logger to use when logging
      logger = "cinnamon.opentracing.Tracer"
    }

    reporters += trace-logging
  }

  auto-trace = on
  overrides.activate-context-only-spans = off

  tracers = [opentelemetryshim]
  opentelemetryshim {
    debug = on
    factory-class = "com.lightbend.opentelemetry.OpenTracingToOTelTracerFactory"
  }

  akka {
#    trace-system-messages = on
    actor {
      message {
        excludes = []
      }
    }
  }

#  akka.scheduler {
#    schedule-once {
#      # Whether to connect traces for asynchronous calls scheduled with the Akka Scheduler scheduleOnce.
#      # Turn it off to disconnect possibly infinite traces.
#      connect-traces = on
#      # Whether to build spans for the execution of the Runnable passed to the Akka Scheduler scheduleOnce.
#      # Note that it will create spans even if build-spans is off when auto-trace is enabled and it's an active trace.
#      build-spans = on
#    }
#  }

}

app {
#  opentracing.opentelemetryshim.enabled = true
#  opentracing.opentelemetryshim.enableGlobalTracer = true
  opentracing.opentelemetryshim.enabled = false
  opentracing.opentelemetryshim.enableGlobalTracer = false

}
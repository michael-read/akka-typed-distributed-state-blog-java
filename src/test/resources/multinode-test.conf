akka.cluster.jmx.multi-mbeans-in-same-jvm = on

akka.actor.testkit.typed {
  single-expect-default = 5s
  filter-leeway = 5s
  system-shutdown-default = 30s
}

# don't self-join until all 3 have been started and probed successfully
akka {
    loglevel = INFO

    remote.artery {
      enabled = on
      transport = tcp
      canonical {
        hostname = "127.0.0.1"
        port = 0
      }
    }

    actor {
        provider = cluster
        serialization-bindings {
          "com.lightbend.artifactstate.serializer.EventSerializeMarker" = jackson-json
          "com.lightbend.artifactstate.serializer.MsgSerializeMarker" = jackson-json
        }
    }

    cluster {
#        log-info-verbose = on

        # sharding must be specified, even if role isn't hosting shards due to validation while joining
        sharding {
          number-of-shards = 20
          passivate-idle-entity-after = 2 minutes
          role = "sharded"
        }

        shutdown-after-unsuccessful-join-seed-nodes = 20s

        downing-provider-class = "akka.cluster.sbr.SplitBrainResolverProvider"
        split-brain-resolver.active-strategy=keep-majority
        split-brain-resolver.keep-majority {
          # if the 'role' is defined the decision is based only on members with that 'role'
          role = "sharded"
        }

    }

    management.cluster.bootstrap.contact-point-discovery {
      service-name = "ArtifactStateCluster"
      discovery-method = config
      # boostrap filters ports with the same IP assuming they are previous instances running on the same node
      # unless a port is specified
      port-name = "management"
      required-contact-point-nr = 2
      contact-with-all-contact-points = true
    }

}

akka.grpc.client {
  "client.ArtifactStateService" {
    host = localhost
    port = 8082
    use-tls = false
  }
}

app {
  # If ask takes more time than this to complete the request is failed
  routes.ask-timeout = 7s
}
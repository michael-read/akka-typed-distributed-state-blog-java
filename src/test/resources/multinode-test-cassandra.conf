akka.cluster.jmx.multi-mbeans-in-same-jvm = on

akka.actor.testkit.typed {
  single-expect-default = 5s
  filter-leeway = 5s
  system-shutdown-default = 30s
}

# don't self-join until all 3 have been started and probed successfully
akka {
    loglevel = INFO

    remote.artery.canonical {
      hostname = "127.0.0.1"
      port = 0
    }

    actor {
        provider = cluster
        serialization-bindings {
          "com.lightbend.artifactstate.serializer.EventSerializeMarker" = jackson-json
          "com.lightbend.artifactstate.serializer.MsgSerializeMarker" = jackson-json
        }
    }

    cluster.log-info-verbose = on

    management.cluster.bootstrap.contact-point-discovery {
      service-name = "ArtifactStateCluster"
      discovery-method = config
      required-contact-point-nr = 3
      contact-with-all-contact-points = true
    }

    # using Cassandra here
    persistence {
        journal.plugin = "akka.persistence.cassandra.journal"
        snapshot-store.plugin = "akka.persistence.cassandra.snapshot"
    }

    coordinated-shutdown.exit-jvm = on
}

# NOTE: autocreation of journal and snapshot should not be used in production
akka.persistence.cassandra {
  journal {
    keyspace-autocreate = true
    tables-autocreate = true
  }
  snapshot {
    keyspace-autocreate = true
    tables-autocreate = true
  }
}
datastax-java-driver {
  advanced.reconnect-on-init = true
  basic.contact-points = ["localhost:9042"]
  basic.load-balancing-policy.local-datacenter = "datacenter1"
}

akka.grpc.client {
  "client.ArtifactStateService" {
    host = localhost
    port = 8082
    use-tls = false
  }
}

app {
  # If ask takes more time than this to complete the request is failed
  routes.ask-timeout = 7s
}
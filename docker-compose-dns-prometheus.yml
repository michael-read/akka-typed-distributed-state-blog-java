version: '3.3'

# Local Yugabyte database, see https://docs.yugabyte.com/latest/deploy/docker/docker-compose/

volumes:
  yb-master-data-1:
  yb-tserver-data-1:

services:
  yb-master:
    image: yugabytedb/yugabyte:2.12.2.0-b58
    container_name: yb-master-n1
    volumes:
      - yb-master-data-1:/mnt/master
    command: [ "/home/yugabyte/bin/yb-master",
               "--fs_data_dirs=/mnt/master",
               "--master_addresses=yb-master-n1:7100",
               "--rpc_bind_addresses=yb-master-n1:7100",
               "--replication_factor=1"]
    ports:
      - "7000:7000"
    environment:
      SERVICE_7000_NAME: yb-master
    networks:
      - sandbox

  yb-tserver:
    image: yugabytedb/yugabyte:2.12.2.0-b58
    container_name: yb-tserver-n1
    shm_size: '512mb'
    volumes:
      - yb-tserver-data-1:/mnt/tserver
      - ./ddl-scripts/create_tables_yugabyte.sql:/docker-entrypoint-initdb.d/10-init.sql-
    command: [ "/home/yugabyte/bin/yb-tserver",
               "--fs_data_dirs=/mnt/tserver",
               "--start_pgsql_proxy",
               "--rpc_bind_addresses=yb-tserver-n1:9100",
               "--tserver_master_addrs=yb-master-n1:7100",
               "--ysql_sequence_cache_minval=1",
               "--yb_num_shards_per_tserver=1"]
    ports:
      - "9042:9042"
      - "5433:5433"
      - "9000:9000"
    environment:
      SERVICE_5433_NAME: ysql
      SERVICE_9042_NAME: ycql
      SERVICE_6379_NAME: yedis
      SERVICE_9000_NAME: yb-tserver
    depends_on:
      - yb-master
    networks:
      - sandbox

  cluster:
    image: akka-typed-blog-distributed-state/cluster:1.1.1
    deploy:
      replicas: 3
    depends_on:
      - jaeger
    environment:
      # for images built with sbt
      JAVA_OPTS: "-Dconfig.resource=cluster-application-docker-dns-tracing.conf"
      # for images built with Maven
      JAVA_TOOL_OPTIONS: "-Dconfig.resource=cluster-application-docker-dns-tracing.conf"
      CLUSTER_IP: cluster
      DB_HOST: yb-tserver
      CINNAMON_ELASTIC_HOSTS: elasticsearch:9200
      JAEGER-HOST: jaeger
    networks:
      - sandbox

  # Note: if you need more than one instance of the endpoint,
  #       you'll need to duplicate, instead of replicas, because of port conflicts
  endpoint:
    image: akka-typed-blog-distributed-state/cluster:1.1.1
    links:
      - cluster
    depends_on:
      - cluster
      - jaeger
    environment:
      # for images built with sbt
      JAVA_OPTS: "-Dconfig.resource=endpoint-application-docker-dns-prometheus.conf"
      # for images built with Maven
      JAVA_TOOL_OPTIONS: "-Dconfig.resource=endpoint-application-docker-dns-prometheus.conf"
      CLUSTER_IP: endpoint
      CINNAMON_ELASTIC_HOSTS: elasticsearch:9200
      JAEGER-HOST: jaeger
    ports:
      - "8082:8082"
      - "8558:8558"
    networks:
      - sandbox

  prometheus:
    image: prom/prometheus:v2.8.1
    volumes:
      - ./telemetry/entrypoint.sh:/bin/prometheus-entrypoint.sh
      - ./telemetry/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./telemetry/targets.json:/etc/prometheus/targets.json
    user: root
    entrypoint:
      - /bin/sh
      - /bin/prometheus-entrypoint.sh
      - --config.file=/etc/prometheus/prometheus.yml
      - --storage.tsdb.path=/prometheus
      - --web.console.libraries=/usr/share/prometheus/console_libraries
      - --web.console.templates=/usr/share/prometheus/consoles
    ports:
      - "9090:9090"
    networks:
      - sandbox

  grafana:
    image: grafana/grafana:6.0.2
    volumes: ["./telemetry/cinnamon-prometheus-app:/var/lib/grafana/plugins/cinnamon-prometheus-app"]
    ports:
      - "3000:3000"
    networks:
      - "sandbox"
    depends_on:
      - "prometheus"


  # Jaeger
  jaeger:
    image: jaegertracing/all-in-one:1.40
    container_name: jaeger
    command: ["--memory.max-traces", "10000", "--query.base-path", "/jaeger/ui"]
    deploy:
      resources:
        limits:
          memory: 275M
    restart: always
    ports:
      - "16686:16686"   # Jaeger UI
      - "4317:4317"     # OTLP gRPC default port
#      - "6831:6831/udp"     # accept jaeger.thrift over Thrift-compact protocol (used by most SDKs)
#      - "6832:6832/udp"     # accept jaeger.thrift over Thrift-binary protocol (used by Node.js SDK)
#      - "5775:5775/udp"     # (deprecated) accept zipkin.thrift over compact Thrift protocol (used by legacy clients only)
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - sandbox

  # OpenTelemetry Collector
  otelcol:
    image: otel/opentelemetry-collector-contrib:0.61.0
    container_name: otel-col
    deploy:
      resources:
        limits:
          memory: 100M
    restart: always
    command: [ "--config=/etc/otelcol-config.yml", "--config=/etc/otelcol-config-extras.yml" ]
    volumes:
      - ./telemetry/otelcol-config.yml:/etc/otelcol-config.yml
      - ./telemetry/otelcol-config-extras.yml:/etc/otelcol-config-extras.yml
    ports:
      - "4317"          # OTLP over gRPC receiver
      - "4318:4318"     # OTLP over HTTP receiver
      - "9464"          # Prometheus exporter
      - "8888"          # metrics endpoint
    depends_on:
      - jaeger
    networks:
      - sandbox

networks:
  sandbox:
    driver: bridge
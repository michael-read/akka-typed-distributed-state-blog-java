<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
                      http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.lightbend</groupId>
    <artifactId>akka-typed-distributed-state-blog-java</artifactId>
    <version>1.2.0</version>
    <packaging>jar</packaging>

    <properties>
        <maven.compiler.source>21</maven.compiler.source>
        <maven.compiler.target>21</maven.compiler.target>
        <akka.version>2.9.5</akka.version>
        <akka.http.version>10.6.3</akka.http.version>
        <akka.management.version>1.5.2</akka.management.version>
        <akka.grpc.version>2.4.3</akka.grpc.version>
        <akka-diagnostics.version>2.1.1</akka-diagnostics.version>
        <grpc.version>1.63.0</grpc.version>
        <project.encoding>UTF-8</project.encoding>
        <!-- The Scala versions -->
        <scala.version>2.13.14</scala.version>
        <scala.binary.version>2.13</scala.binary.version>
        <app.configfile>cluster-application-docker-dns.conf</app.configfile>
        <docker.maven.plugin.version>0.45.0</docker.maven.plugin.version>
        <tests.skip>true</tests.skip>
        <logback.version>1.2.13</logback.version>
    </properties>

    <repositories>
        <repository>
            <id>akka-repository</id>
            <name>Akka library repository</name>
            <url>https://repo.akka.io/maven</url>
        </repository>
    </repositories>
    <pluginRepositories>
        <pluginRepository>
            <id>akka-repository</id>
            <name>Akka library repository</name>
            <url>https://repo.akka.io/maven</url>
        </pluginRepository>
    </pluginRepositories>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>com.typesafe.akka</groupId>
                <artifactId>akka-bom_${scala.binary.version}</artifactId>
                <version>${akka.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <dependency>
                <groupId>com.typesafe.akka</groupId>
                <artifactId>akka-http-bom_${scala.binary.version}</artifactId>
                <version>${akka.http.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <dependencies>
        <dependency>
            <groupId>com.typesafe.akka</groupId>
            <artifactId>akka-actor-typed_${scala.binary.version}</artifactId>
        </dependency>
        <dependency>
            <groupId>com.typesafe.akka</groupId>
            <artifactId>akka-cluster-typed_${scala.binary.version}</artifactId>
        </dependency>
        <dependency>
            <groupId>com.typesafe.akka</groupId>
            <artifactId>akka-serialization-jackson_${scala.binary.version}</artifactId>
        </dependency>
        <dependency>
            <groupId>com.typesafe.akka</groupId>
            <artifactId>akka-persistence-typed_${scala.binary.version}</artifactId>
        </dependency>
        <dependency>
            <groupId>com.typesafe.akka</groupId>
            <artifactId>akka-persistence-cassandra_${scala.binary.version}</artifactId>
            <version>1.0.5</version>
        </dependency>
        <dependency>
            <groupId>com.typesafe.akka</groupId>
            <artifactId>akka-persistence_${scala.binary.version}</artifactId>
<!--            <version>${akka.version}</version>-->
        </dependency>
        <dependency>
            <groupId>com.typesafe.akka</groupId>
            <artifactId>akka-persistence-query_${scala.binary.version}</artifactId>
<!--            <version>${akka.version}</version>-->
        </dependency>
        <dependency>
            <groupId>com.typesafe.akka</groupId>
            <artifactId>akka-cluster-tools_${scala.binary.version}</artifactId>
<!--            <version>${akka.version}</version>-->
        </dependency>
        <dependency>
            <groupId>com.typesafe.akka</groupId>
            <artifactId>akka-cluster-sharding-typed_${scala.binary.version}</artifactId>
        </dependency>
        <dependency>
            <groupId>com.lightbend.akka.management</groupId>
            <artifactId>akka-management_${scala.binary.version}</artifactId>
            <version>${akka.management.version}</version>
        </dependency>
        <dependency>
            <groupId>com.lightbend.akka.management</groupId>
            <artifactId>akka-management-cluster-http_${scala.binary.version}</artifactId>
            <version>${akka.management.version}</version>
        </dependency>
        <dependency>
            <groupId>com.lightbend.akka.management</groupId>
            <artifactId>akka-management-cluster-bootstrap_${scala.binary.version}</artifactId>
            <version>${akka.management.version}</version>
        </dependency>
        <dependency>
            <groupId>com.typesafe.akka</groupId>
            <artifactId>akka-discovery_${scala.binary.version}</artifactId>
            <version>${akka.version}</version>
        </dependency>
        <dependency>
            <groupId>com.lightbend.akka.discovery</groupId>
            <artifactId>akka-discovery-kubernetes-api_${scala.binary.version}</artifactId>
            <version>${akka.management.version}</version>
        </dependency>
        <dependency>
            <groupId>com.typesafe.akka</groupId>
            <artifactId>akka-stream_${scala.binary.version}</artifactId>
            <version>${akka.version}</version>
        </dependency>
        <dependency>
            <groupId>com.typesafe.akka</groupId>
            <artifactId>akka-http_${scala.binary.version}</artifactId>
        </dependency>
        <dependency>
            <groupId>com.typesafe.akka</groupId>
            <artifactId>akka-http-jackson_${scala.binary.version}</artifactId>
        </dependency>
        <dependency>
            <groupId>com.lightbend.akka.grpc</groupId>
            <artifactId>akka-grpc-runtime_${scala.binary.version}</artifactId>
            <version>${akka.grpc.version}</version>
        </dependency>
        <dependency>
            <groupId>com.lightbend.akka</groupId>
            <artifactId>akka-diagnostics_${scala.binary.version}</artifactId>
            <version>${akka-diagnostics.version}</version>
        </dependency>
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
            <version>${logback.version}</version>
        </dependency>

        <!-- This is dependency to use for Akka Persistence with Postgres/Yugabyte  -->
        <dependency>
            <groupId>com.lightbend.akka</groupId>
            <artifactId>akka-persistence-r2dbc_${scala.binary.version}</artifactId>
            <version>0.5.0</version>
        </dependency>

        <!-- Test Scope -->
        <dependency>
            <groupId>com.typesafe.akka</groupId>
            <artifactId>akka-actor-testkit-typed_${scala.binary.version}</artifactId>
            <version>${akka.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.13.1</version>
            <scope>test</scope>
        </dependency>

    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>2.22.0</version>
                <configuration>
                    <skipTests>${tests.skip}</skipTests>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.8.1</version>
                <configuration>
                    <source>${maven.compiler.source}</source>
                    <target>${maven.compiler.target}</target>
                    <compilerArgs>
                        <arg>-Xlint:unchecked</arg>
                        <arg>-Xlint:deprecation</arg>
                        <arg>-parameters</arg>
                    </compilerArgs>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>exec-maven-plugin</artifactId>
                <version>3.0.0</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <!--suppress UnresolvedMavenProperty -->
                    <executable>java</executable>
                    <arguments>
                        <argument>-classpath</argument>
                        <!-- automatically creates the classpath using all project dependencies,
                             also adding the project build directory -->
                        <classpath/>
                        <argument>-Dconfig.resource=${app.configfile}</argument>
                        <argument>com.lightbend.artifactstate.app.StartNode</argument>
                    </arguments>
                </configuration>
            </plugin>
            <plugin>
                <groupId>com.lightbend.akka.grpc</groupId>
                <artifactId>akka-grpc-maven-plugin</artifactId>
                <version>${akka.grpc.version}</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>generate</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <language>Java</language>
                    <generateClient>true</generateClient> <!-- we need the client for multi-node tests -->
                    <generateServer>true</generateServer>
                </configuration>
            </plugin>

            <!-- docker image creation -->
            <!-- https://github.com/fabric8io/docker-maven-plugin -->
            <!-- To generate docker image: mvn clean compile package docker:build -->
            <plugin>
                <groupId>io.fabric8</groupId>
                <artifactId>docker-maven-plugin</artifactId>
                <version>${docker.maven.plugin.version}</version>
                <configuration>
                    <images>
                        <image>
                            <name>akka-typed-blog-distributed-state-java/cluster</name>
                            <build>
                                <from>docker.io/library/eclipse-temurin:21</from>
                                <tags>
                                    <tag>latest</tag>
                                    <tag>${version.number}</tag>
                                </tags>
                                <entryPoint>
                                    <exec>
                                        <arg>java</arg>
                                        <arg>-cp</arg>
                                        <arg>/maven/*</arg>
                                        <arg>com.lightbend.artifactstate.app.StartNode</arg>
                                    </exec>
                                </entryPoint>
                                <assembly>
                                    <descriptorRef>artifact-with-dependencies</descriptorRef>
                                </assembly>
                            </build>
                        </image>
                    </images>
                </configuration>
                <executions>
                    <execution>
                        <id>build-docker-image</id>
                        <phase>package</phase>
                        <goals>
                            <goal>build</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <!-- END docker image creation -->

        </plugins>
    </build>
</project>